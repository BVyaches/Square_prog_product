from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from main import translate_to_users_lang, auto_check_type, set_accuracy, database, LANGCODES


async def main_keyboard(message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True,
                                         one_time_keyboard=True, row_width=1)

    buttons = [translate_to_users_lang('–ü–æ—Å—á–∏—Ç–∞—Ç—å —Å –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é', message) + '.', 'üåé‚öôÔ∏è']
    keyboard.add(*buttons)
    return keyboard


async def language_keyboard(message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ['–†—É—Å—Å–∫–∏–π', 'English', 'Ê±âËØ≠', 'Espa√±ol ', '‡§π‡§ø‡§®‡•ç‡§¶‡•Ä', translate_to_users_lang('–î—Ä—É–≥–æ–π', message)]
    keyboard.add(*buttons)
    return keyboard


async def start_bot(message: types.Message):
    keyboard = await main_keyboard(message)
    await message.answer(
        translate_to_users_lang(
            '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–æ—Ä–Ω–µ–π! '
            '–Ø —É–º–µ—é –≤—ã—á–∏—Å–ª—è—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å –∏–∑ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ª—é–±–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ —á–∏—Å–ª–∞.\n'
            '–ß—Ç–æ–±—ã –ø–æ—Å—á–∏—Ç–∞—Ç—å –ª—é–±–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –æ—Ç—Ä–∞–≤—å—Ç–µ –µ–≥–æ –æ—Ç–≤–µ—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, '
            '–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—É—é —Å–ª–µ–≤–∞ –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ, '
            '—á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π.\n'
            '–ß—Ç–æ–±—ã –ø–æ–º–µ–Ω—è—Ç—å —è–∑—ã–∫ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üåé‚öôÔ∏è".'
            '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞:\n@Vyaches_s\n8-992-224-70-47\nvsbolshagin@edu.hse.\n'
            '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ –∏ –Ω–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∑—ã–∫–∞—Ö.\n'
            '–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!\n'
            '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /commands',
            message),
        reply_markup=keyboard)


async def cancel_operation(message: types.Message, state: FSMContext):
    await state.finish()
    keyboard = await main_keyboard(message)
    await message.answer(translate_to_users_lang('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞', message), reply_markup=keyboard)


async def commands_list(message: types.Message, state: FSMContext):
    keyboard = await main_keyboard(message)
    await message.answer(
        translate_to_users_lang(
            '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ:\n'
            '/start - –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º\n'
            '/help - —É–∑–Ω–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞\n'
            '/commands - —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n'
            '/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é, –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n'
            '/menu - –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
            message),
        reply_markup=keyboard)
    await state.finish()


async def get_menu(message: types.Message, state: FSMContext):
    await state.finish()
    keyboard = await main_keyboard(message)
    await message.answer(translate_to_users_lang('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', message), reply_markup=keyboard)


async def help_list(message: types.Message, state: FSMContext):
    await state.finish()
    keyboard = await main_keyboard(message)
    await message.answer(translate_to_users_lang('–í—ã—Ä–∞–∂–µ–Ω–∏—è, –∏–∑ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≥—Ä–∞–º–º–∞ —É–º–µ–µ—Ç –∏–∑–≤–ª–µ–∫–∞—Ç—å –∫–æ—Ä–Ω–∏:\n'
                                                 '1. –¶–µ–ª—ã–µ –∏ –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞\n2. –ß–∏—Å–ª–∞ –≤ —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–ø–∏—Å–∏\n'
                                                 '3. –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞\n4. –í—ã—Ä–∞–∂–µ–Ω–∏—è –≤–∏–¥–∞ a**b, '
                                                 '–≥–¥–µ a - –ª—é–±–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, b-—á–µ—Ç–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —Å—Ç–µ–ø–µ–Ω–∏\n'
                                                 '5. –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º—É–ª–∞ –ø–æ–ª–Ω–æ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞ –∏–ª–∏ '
                                                 '—Å–ª–µ–¥—Å—Ç–≤–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–≥–æ —Ç–æ–∂–¥–µ—Å—Ç–≤–∞\n'
                                                 '6. –í—ã—Ä–∞–∂–µ–Ω–∏—è –≤–∏–¥–∞ a**b, –≥–¥–µ –∞ - —á–∏—Å–ª–æ, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—Ü–µ–ª–æ –≤—ã–¥–µ–ª—è–µ—Ç—Å—è '
                                                 '–∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å, b - –ª—é–±–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è\n'
                                                 '–î–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –Ω–∞–∂–º–∏—Ç–µ', message)+ ' /commands', reply_markup=keyboard)


class CalculateWithAccuracy(StatesGroup):
    waiting_for_accuracy = State()
    waiting_for_formula = State()


async def calculate_acccurate_first(message: types.Message):
    await message.answer(
        translate_to_users_lang('–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π', message),
        reply_markup=types.ReplyKeyboardRemove())
    await CalculateWithAccuracy.waiting_for_accuracy.set()


async def calculate_acccurate_second(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer(translate_to_users_lang('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ', message)
                             )
        return True
    accuracy = int(message.text)
    await state.update_data(waiting_for_accuracy=accuracy)

    await message.answer(translate_to_users_lang('–í–≤–µ–¥–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ', message),
                         reply_markup=types.ReplyKeyboardRemove())
    await CalculateWithAccuracy.waiting_for_formula.set()


async def calculate_acccurate_third(message: types.Message, state=FSMContext):
    result = auto_check_type(message.html_text.replace('<b>', '**').replace('</b>', '**'))
    if not result:
        await message.answer(translate_to_users_lang(
            '–ü–æ—Ö–æ–∂–µ, –í—ã –æ—à–∏–±–ª–∏—Å—å –ø—Ä–∏ –≤–≤–æ–¥–µ, –∏–ª–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–æ–∫–∞ –Ω–µ —É–º–µ–µ–µ—Ç —Ç–∞–∫–æ–µ —Å—á–∏—Ç–∞—Ç—å.'
            ' –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â—ë —Ä–∞–∑\n'
            '–î–ª—è –ø–æ–∂–µ–ª–∞–Ω–∏–π –ø–∏—à–∏—Ç–µ —Å—é–¥–∞: @Vyaches\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ', message) + ' /cancel',
                             reply_markup=types.ReplyKeyboardRemove())
        return True
    keyboard = await main_keyboard(message)
    if await state.get_state() is None:
        await message.answer(result, reply_markup=keyboard)
    else:
        data = await state.get_data()
        await message.answer(set_accuracy(result, data.get('waiting_for_accuracy')), reply_markup=keyboard)
    await state.finish()


class ChangingLanguage(StatesGroup):
    waiting_for_new_lang = State()
    setting_another_lang = State()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
async def change_language_first(message: types.Message):
    keyboard = await language_keyboard(message)
    await message.answer(
        translate_to_users_lang('–ù–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É\n'
                                '–ï—Å–ª–∏ –Ω—É–∂–Ω–æ–≥–æ —è–∑—ã–∫–∞ –Ω–µ—Ç, –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ, –≤–≤–µ–¥—è –∫–æ–¥ —è–∑—ã–∫–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–î—Ä—É–≥–æ–π"',
                                message), reply_markup=keyboard)
    await ChangingLanguage.waiting_for_new_lang.set()


async def change_language_second(message: types.Message, state: FSMContext):
    langs = {'–†—É—Å—Å–∫–∏–π': 'ru', 'English': 'en', 'Ê±âËØ≠': 'zh-cn', 'Espa√±ol': 'es', '‡§π‡§ø‡§®‡•ç‡§¶‡•Ä': 'hi'}
    lang_code = langs.get(message.text)
    if lang_code == database.get(message.from_user.id):
        keyboard = await main_keyboard(message)
        await message.answer(translate_to_users_lang('–î–∞–Ω–Ω—ã–π —è–∑—ã–∫ –∏ —Ç–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è', message), reply_markup=keyboard)
        await state.finish()
    else:
        if lang_code:
            database[message.from_user.id] = lang_code
            keyboard = await main_keyboard(message)
            await message.answer(translate_to_users_lang('–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ–Ω—è–ª–∏ —è–∑—ã–∫', message), reply_markup=keyboard)
            await state.finish()
        elif message.text == translate_to_users_lang('–î—Ä—É–≥–æ–π', message):
            await message.answer(translate_to_users_lang('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –Ω—É–∂–Ω–æ–≥–æ —è–∑—ã–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "en" –∏–ª–∏ "ru".\n'
                                                         '–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ ', message) + ' /cancel')
            await ChangingLanguage.setting_another_lang.set()
        else:
            keyboard = await language_keyboard(message)
            await message.answer(
                translate_to_users_lang('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω—É–∂–Ω—ã–π —è–∑—ã–∫ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–∞–∂–∞—Ç–∏–µ–º –∫–Ω–æ–ø–∫–∏ "–î—Ä—É–≥–æ–π"',
                                        message),
                reply_markup=keyboard)
            return True


async def change_language_third(message: types.Message, state: FSMContext):
    if message.text.lower() not in LANGCODES.values():
        await message.answer(translate_to_users_lang(
            '–ü–æ—Ö–æ–∂–µ, –í—ã –æ—à–∏–±–ª–∏—Å—å –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã –∏–ª–∏ –¥–∞–Ω–Ω—ã–π –∫–æ–¥ –Ω–µ–≤–µ—Ä–µ–Ω.'
            ' –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â—ë —Ä–∞–∑ –∫–æ–¥ —è–∑—ã–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ø–æ —Ç–∏–ø—É "en" –∏–ª–∏ "ru".\n'
            '–î–ª—è –ø–æ–∂–µ–ª–∞–Ω–∏–π –ø–∏—à–∏—Ç–µ —Å—é–¥–∞: @Vyaches\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ ', message) + ' /cancel')
        return True

    new_lang_code = message.text.lower()
    if new_lang_code in [database.get(message.from_user.id), message.from_user.language_code]:
        keyboard = await main_keyboard(message)
        await message.answer(translate_to_users_lang('–î–∞–Ω–Ω—ã–π —è–∑—ã–∫ –∏ —Ç–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è', message), reply_markup=keyboard)

    else:
        database[message.from_user.id] = new_lang_code
        keyboard = await main_keyboard(message)
        await message.answer(translate_to_users_lang('–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ–Ω—è–ª–∏ —è–∑—ã–∫', message), reply_markup=keyboard)
    await state.finish()


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–π
def register_handlers_common(dp: Dispatcher):
    dp.register_message_handler(start_bot, commands='start', state='*')
    dp.register_message_handler(commands_list, commands='commands', state='*')
    dp.register_message_handler(help_list, commands='help', state='*')
    dp.register_message_handler(get_menu, commands='menu', state='*')
    dp.register_message_handler(cancel_operation, commands='cancel', state='*')
    dp.register_message_handler(cancel_operation, Text(equals='–û—Ç–º–µ–Ω–∞',
                                                       ignore_case=True),
                                state='*'),

    dp.register_message_handler(calculate_acccurate_first, Text(endswith='.', ignore_case=True), state='*'),
    dp.register_message_handler(calculate_acccurate_second, state=CalculateWithAccuracy.waiting_for_accuracy),
    dp.register_message_handler(calculate_acccurate_third, state=CalculateWithAccuracy.waiting_for_formula),

    dp.register_message_handler(change_language_first, Text(equals='üåé‚öôÔ∏è')),
    dp.register_message_handler(change_language_second, state=ChangingLanguage.waiting_for_new_lang),
    dp.register_message_handler(change_language_third, state=ChangingLanguage.setting_another_lang)
    dp.register_message_handler(calculate_acccurate_third, state=None),
